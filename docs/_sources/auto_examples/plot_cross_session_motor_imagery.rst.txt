.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_cross_session_motor_imagery.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_cross_session_motor_imagery.py:


===========================
Cross Session Motor Imagery
===========================

This Example show how to perform a cross session motor imagery analysis on the
very popular dataset 2a from the BCI competition IV.

We will compare two pipelines :

- CSP + LDA
- Riemannian Geometry + Logistic Regression

We will use the LeftRightImagery paradigm. this will restrict the analysis
to two classes (left hand versus righ hand) and use AUC as metric.

The cross session evaluation context will evaluate performance using a leave
one session out cross-validation. For each session in the dataset, a model
is trained on every other session and performance are evaluated on the current
session.


.. code-block:: default

    # Authors: Alexandre Barachant <alexandre.barachant@gmail.com>
    #
    # License: BSD (3-clause)

    import moabb
    import matplotlib.pyplot as plt
    import seaborn as sns

    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.linear_model import LogisticRegression
    from sklearn.pipeline import make_pipeline

    from mne.decoding import CSP

    from pyriemann.estimation import Covariances
    from pyriemann.tangentspace import TangentSpace

    from moabb.datasets import BNCI2014001
    from moabb.paradigms import LeftRightImagery
    from moabb.evaluations import CrossSessionEvaluation

    moabb.set_log_level('info')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/repo/venv/lib/python3.6/site-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.cluster.k_means_ module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.cluster. Anything that cannot be imported from sklearn.cluster is now part of the private API.
      warnings.warn(message, FutureWarning)
    /home/circleci/repo/venv/lib/python3.6/site-packages/sklearn/externals/joblib/__init__.py:15: FutureWarning: sklearn.externals.joblib is deprecated in 0.21 and will be removed in 0.23. Please import this functionality directly from joblib, which can be installed with: pip install joblib. If this warning is raised when loading pickled models, you may need to re-serialize those models with scikit-learn 0.21+.
      warnings.warn(msg, category=FutureWarning)




Create pipelines
----------------

Pipelines must be a dict of sklearn pipeline transformer.

The csp implementation from MNE is used. We selected 8 CSP components, as
usually done in the litterature.

The riemannian geometry pipeline consists in covariance estimation, tangent
space mapping and finaly a logistic regression for the classification.


.. code-block:: default


    pipelines = {}

    pipelines['CSP + LDA'] = make_pipeline(CSP(n_components=8),
                                           LDA())

    pipelines['RG + LR'] = make_pipeline(Covariances(),
                                         TangentSpace(),
                                         LogisticRegression(solver='lbfgs'))








Evaluation
----------

We define the paradigm (LeftRightImagery) and the dataset (BNCI2014001).
The evaluation will return a dataframe containing a single AUC score for
each subject / session of the dataset, and for each pipeline.

Results are saved into the database, so that if you add a new pipeline, it
will not run again the evaluation unless a parameter has changed. Results can
be overwrited if necessary.


.. code-block:: default


    paradigm = LeftRightImagery()
    # Because this is being auto-generated we only use 2 subjects
    dataset = BNCI2014001()
    dataset.subject_list = dataset.subject_list[:2]
    datasets = [dataset]
    overwrite = False  # set to True if we want to overwrite cached results
    evaluation = CrossSessionEvaluation(paradigm=paradigm, datasets=datasets,
                                        suffix='examples', overwrite=overwrite)

    results = evaluation.process(pipelines)

    print(results.head())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    2020-01-15 14:24:14 a97ed8b73994 root[136] INFO Processing dataset: 001-2014
    2020-01-15 14:24:18 a97ed8b73994 root[136] INFO CSP + LDA | 001-2014 | 1 | session_E: Score 0.955
    2020-01-15 14:24:19 a97ed8b73994 root[136] INFO CSP + LDA | 001-2014 | 1 | session_T: Score 0.932
    2020-01-15 14:24:19 a97ed8b73994 root[136] INFO RG + LR | 001-2014 | 1 | session_E: Score 0.963
    2020-01-15 14:24:20 a97ed8b73994 root[136] INFO RG + LR | 001-2014 | 1 | session_T: Score 0.950
    2020-01-15 14:24:24 a97ed8b73994 root[136] INFO CSP + LDA | 001-2014 | 2 | session_E: Score 0.646
    2020-01-15 14:24:25 a97ed8b73994 root[136] INFO CSP + LDA | 001-2014 | 2 | session_T: Score 0.527
    2020-01-15 14:24:25 a97ed8b73994 root[136] INFO RG + LR | 001-2014 | 2 | session_E: Score 0.586
    2020-01-15 14:24:26 a97ed8b73994 root[136] INFO RG + LR | 001-2014 | 2 | session_T: Score 0.575
          score  ...   pipeline
    0  0.962963  ...    RG + LR
    1  0.950424  ...    RG + LR
    2  0.585648  ...    RG + LR
    3  0.574846  ...    RG + LR
    4  0.955440  ...  CSP + LDA

    [5 rows x 9 columns]




Plot Results
----------------

Here we plot the results. We the first plot is a pointplot with the average
performance of each pipeline across session and subjects.
The second plot is a paired scatter plot. Each point representing the score
of a single session. An algorithm will outperforms another is most of the
points are in its quadrant.


.. code-block:: default


    fig, axes = plt.subplots(1, 2, figsize=[8, 4], sharey=True)

    sns.stripplot(data=results, y='score', x='pipeline', ax=axes[0], jitter=True,
                  alpha=.5, zorder=1, palette="Set1")
    sns.pointplot(data=results, y='score', x='pipeline', ax=axes[0],
                  zorder=1, palette="Set1")

    axes[0].set_ylabel('ROC AUC')
    axes[0].set_ylim(0.5, 1)

    # paired plot
    paired = results.pivot_table(values='score', columns='pipeline',
                                 index=['subject', 'session'])
    paired = paired.reset_index()

    sns.regplot(data=paired, y='RG + LR', x='CSP + LDA', ax=axes[1],
                fit_reg=False)
    axes[1].plot([0, 1], [0, 1], ls='--', c='k')
    axes[1].set_xlim(0.5, 1)

    plt.show()



.. image:: /auto_examples/images/sphx_glr_plot_cross_session_motor_imagery_001.png
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.501 seconds)


.. _sphx_glr_download_auto_examples_plot_cross_session_motor_imagery.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_cross_session_motor_imagery.py <plot_cross_session_motor_imagery.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_cross_session_motor_imagery.ipynb <plot_cross_session_motor_imagery.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
