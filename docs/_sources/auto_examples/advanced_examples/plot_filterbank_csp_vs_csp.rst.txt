
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/advanced_examples/plot_filterbank_csp_vs_csp.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_advanced_examples_plot_filterbank_csp_vs_csp.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_advanced_examples_plot_filterbank_csp_vs_csp.py:


=========================
FilterBank CSP versus CSP
=========================

This Example show a comparison of CSP versus FilterBank CSP on the
very popular dataset 2a from the BCI competition IV.

.. GENERATED FROM PYTHON SOURCE LINES 9-29

.. code-block:: default

    # Authors: Alexandre Barachant <alexandre.barachant@gmail.com>
    #
    # License: BSD (3-clause)

    import matplotlib.pyplot as plt
    import pandas as pd
    import seaborn as sns
    from mne.decoding import CSP
    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.pipeline import make_pipeline

    import moabb
    from moabb.datasets import BNCI2014001
    from moabb.evaluations import CrossSessionEvaluation
    from moabb.paradigms import FilterBankLeftRightImagery, LeftRightImagery
    from moabb.pipelines.utils import FilterBank


    moabb.set_log_level("info")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'rocket' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'rocket_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'mako' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'mako_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'icefire' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'icefire_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'vlag' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'vlag_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'flare' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'flare_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'crest' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'crest_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)




.. GENERATED FROM PYTHON SOURCE LINES 30-42

Create pipelines
----------------

The CSP implementation from MNE is used. We selected 8 CSP components, as
usually done in the litterature.

The second pipeline is the filter bank CSP. We use the FilterBank object
with a CSP estimator. We set up the CSP to 4 components, to compensate for
the higher dimensionality.

The two pipelines will be applied on two different paradigm, so they have
their own dict.

.. GENERATED FROM PYTHON SOURCE LINES 42-49

.. code-block:: default


    pipelines = {}
    pipelines["CSP+LDA"] = make_pipeline(CSP(n_components=8), LDA())

    pipelines_fb = {}
    pipelines_fb["FBCSP+LDA"] = make_pipeline(FilterBank(CSP(n_components=4)), LDA())








.. GENERATED FROM PYTHON SOURCE LINES 50-62

Evaluation
----------

Since two different preprocessing will be applied, we have two different
paradigm objects. We have to make sure their filter matchs so the comparison
will be fair.

The first one is a standard `LeftRightImagery` with a 8 to 35 Hz broadband
filter.

The second is a `FilterBankLeftRightImagery` with a bank of 6 filter, ranging
from 8 to 35 Hz.

.. GENERATED FROM PYTHON SOURCE LINES 62-86

.. code-block:: default


    # Because this is being auto-generated we only use 2 subjects
    dataset = BNCI2014001()
    dataset.subject_list = dataset.subject_list[:2]
    datasets = [dataset]
    overwrite = False  # set to True if we want to overwrite cached results

    # broadband filters
    fmin = 8
    fmax = 35
    paradigm = LeftRightImagery(fmin=fmin, fmax=fmax)
    evaluation = CrossSessionEvaluation(
        paradigm=paradigm, datasets=datasets, suffix="examples", overwrite=overwrite
    )
    results = evaluation.process(pipelines)

    # bank of 6 filter, by 4 Hz increment
    filters = [[8, 12], [12, 16], [16, 20], [20, 24], [24, 28], [28, 35]]
    paradigm = FilterBankLeftRightImagery(filters=filters)
    evaluation = CrossSessionEvaluation(
        paradigm=paradigm, datasets=datasets, suffix="examples", overwrite=overwrite
    )
    results_fb = evaluation.process(pipelines_fb)








.. GENERATED FROM PYTHON SOURCE LINES 87-88

After processing the two, we simply concatenate the results.

.. GENERATED FROM PYTHON SOURCE LINES 88-92

.. code-block:: default


    results = pd.concat([results, results_fb])









.. GENERATED FROM PYTHON SOURCE LINES 93-101

Plot Results
----------------

Here we plot the results via normal methods. We the first plot is a pointplot
with the average performance of each pipeline across session and subjects.
The second plot is a paired scatter plot. Each point representing the score
of a single session. An algorithm will outperforms another is most of the
points are in its quadrant.

.. GENERATED FROM PYTHON SOURCE LINES 101-130

.. code-block:: default


    fig, axes = plt.subplots(1, 2, figsize=[8, 4], sharey=True)

    sns.stripplot(
        data=results,
        y="score",
        x="pipeline",
        ax=axes[0],
        jitter=True,
        alpha=0.5,
        zorder=1,
        palette="Set1",
    )
    sns.pointplot(data=results, y="score", x="pipeline", ax=axes[0], zorder=1, palette="Set1")

    axes[0].set_ylabel("ROC AUC")
    axes[0].set_ylim(0.5, 1)

    # paired plot
    paired = results.pivot_table(
        values="score", columns="pipeline", index=["subject", "session"]
    )
    paired = paired.reset_index()

    sns.regplot(data=paired, y="FBCSP+LDA", x="CSP+LDA", ax=axes[1], fit_reg=False)
    axes[1].plot([0, 1], [0, 1], ls="--", c="k")
    axes[1].set_xlim(0.5, 1)

    plt.show()



.. image:: /auto_examples/advanced_examples/images/sphx_glr_plot_filterbank_csp_vs_csp_001.png
    :alt: plot filterbank csp vs csp
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  26.606 seconds)


.. _sphx_glr_download_auto_examples_advanced_examples_plot_filterbank_csp_vs_csp.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_filterbank_csp_vs_csp.py <plot_filterbank_csp_vs_csp.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_filterbank_csp_vs_csp.ipynb <plot_filterbank_csp_vs_csp.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
