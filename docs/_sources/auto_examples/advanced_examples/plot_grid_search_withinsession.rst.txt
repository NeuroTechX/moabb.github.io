
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/advanced_examples/plot_grid_search_withinsession.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_advanced_examples_plot_grid_search_withinsession.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_advanced_examples_plot_grid_search_withinsession.py:


============================
GridSearch within a session
============================

This example demonstrates how to make a model selection in pipelines
for finding the best model parameter, using grid search. Two models
are compared, one "vanilla" model with model tuned via grid search.

.. GENERATED FROM PYTHON SOURCE LINES 10-45

.. code-block:: default

    import os

    import joblib
    import matplotlib.pyplot as plt
    import seaborn as sns
    from pyriemann.estimation import Covariances
    from pyriemann.tangentspace import TangentSpace
    from sklearn.linear_model import LogisticRegression
    from sklearn.pipeline import Pipeline

    from moabb.datasets import BNCI2014001
    from moabb.evaluations import WithinSessionEvaluation
    from moabb.paradigms import MotorImagery


    # Initialize parameter for the Band Pass filter
    fmin = 8
    fmax = 35
    tmax = None

    # Select the Subject
    subjects = [1]
    # Load the dataset
    dataset = BNCI2014001()

    events = ["right_hand", "left_hand"]

    paradigm = MotorImagery(
        events=events, n_classes=len(events), fmin=fmin, fmax=fmax, tmax=tmax
    )

    # Create a path and folder for every subject
    path = os.path.join(str("Results"))
    os.makedirs(path, exist_ok=True)








.. GENERATED FROM PYTHON SOURCE LINES 46-51

Create the Pipelines
--------------------
Two pipelines implementing elastic net classifiers, one using a fixed
l1_ratio ("VanillaEN") and the other using a range of values to select
l1_ratio ("GridSearchEN")

.. GENERATED FROM PYTHON SOURCE LINES 51-87

.. code-block:: default


    pipelines = {}
    pipelines["VanillaEN"] = Pipeline(
        steps=[
            ("Covariances", Covariances("cov")),
            ("Tangent_Space", TangentSpace(metric="riemann")),
            (
                "LogistReg",
                LogisticRegression(
                    penalty="elasticnet",
                    l1_ratio=0.75,
                    intercept_scaling=1000.0,
                    solver="saga",
                    max_iter=1000,
                ),
            ),
        ]
    )

    pipelines["GridSearchEN"] = Pipeline(
        steps=[
            ("Covariances", Covariances("cov")),
            ("Tangent_Space", TangentSpace(metric="riemann")),
            (
                "LogistReg",
                LogisticRegression(
                    penalty="elasticnet",
                    l1_ratio=0.70,
                    intercept_scaling=1000.0,
                    solver="saga",
                    max_iter=1000,
                ),
            ),
        ]
    )








.. GENERATED FROM PYTHON SOURCE LINES 88-90

The search space for parameters is defined as a dictionary, specifying the
name of the estimator and the parameter name as a key.

.. GENERATED FROM PYTHON SOURCE LINES 90-96

.. code-block:: default


    param_grid = {}
    param_grid["GridSearchEN"] = {
        "LogistReg__l1_ratio": [0.15, 0.30, 0.45, 0.60, 0.75],
    }








.. GENERATED FROM PYTHON SOURCE LINES 97-101

Running the Evaluation
----------------------
If a param_grid is specified during process, the specified pipelines will
automatically be run with a grid search.

.. GENERATED FROM PYTHON SOURCE LINES 101-113

.. code-block:: default


    dataset.subject_list = dataset.subject_list[:1]
    evaluation = WithinSessionEvaluation(
        paradigm=paradigm,
        datasets=dataset,
        overwrite=True,
        random_state=42,
        hdf5_path=path,
        n_jobs=-1,
    )
    result = evaluation.process(pipelines, param_grid)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    001-2014-WithinSession:   0%|          | 0/1 [00:00<?, ?it/s]    001-2014-WithinSession: 100%|##########| 1/1 [00:10<00:00, 10.26s/it]    001-2014-WithinSession: 100%|##########| 1/1 [00:10<00:00, 10.26s/it]




.. GENERATED FROM PYTHON SOURCE LINES 114-118

Plot Results
------------
The grid search allows to find better parameter during the
evaluation, leading to better accuracy results.

.. GENERATED FROM PYTHON SOURCE LINES 118-134

.. code-block:: default


    fig, axes = plt.subplots(1, 1, figsize=[8, 5], sharey=True)

    sns.stripplot(
        data=result,
        y="score",
        x="pipeline",
        ax=axes,
        jitter=True,
        alpha=0.5,
        zorder=1,
        palette="Set1",
    )
    sns.pointplot(data=result, y="score", x="pipeline", ax=axes, palette="Set1")
    axes.set_ylabel("ROC AUC")




.. image-sg:: /auto_examples/advanced_examples/images/sphx_glr_plot_grid_search_withinsession_001.png
   :alt: plot grid search withinsession
   :srcset: /auto_examples/advanced_examples/images/sphx_glr_plot_grid_search_withinsession_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(44.972222222222214, 0.5, 'ROC AUC')



.. GENERATED FROM PYTHON SOURCE LINES 135-142

Load Best Model Parameter
-------------------------
The best model are automatically saved in a pickle file, in the
results directory. It is possible to load those model for each
dataset, subject and session. Here, we could see that the grid
search found a l1_ratio that is different from the baseline
value.

.. GENERATED FROM PYTHON SOURCE LINES 142-182

.. code-block:: default


    search_session_E = joblib.load(
        os.path.join(
            path,
            "GridSearch_WithinSession",
            "001-2014",
            "subject1",
            "session_E",
            "GridSearchEN",
            "Grid_Search_WithinSession.pkl",
        )
    )
    print(
        "Best Parameter l1_ratio Session_E GridSearchEN ",
        search_session_E.best_params_["LogistReg__l1_ratio"],
    )
    print(
        "Best Parameter l1_ratio Session_E VanillaEN: ",
        pipelines["VanillaEN"].steps[2][1].l1_ratio,
    )

    search_session_T = joblib.load(
        os.path.join(
            path,
            "GridSearch_WithinSession",
            "001-2014",
            "subject1",
            "session_T",
            "GridSearchEN",
            "Grid_Search_WithinSession.pkl",
        )
    )
    print(
        "Best Parameter l1_ratio Session_T GridSearchEN ",
        search_session_T.best_params_["LogistReg__l1_ratio"],
    )
    print(
        "Best Parameter l1_ratio Session_T VanillaEN: ",
        pipelines["VanillaEN"].steps[2][1].l1_ratio,
    )




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Best Parameter l1_ratio Session_E GridSearchEN  0.3
    Best Parameter l1_ratio Session_E VanillaEN:  0.75
    Best Parameter l1_ratio Session_T GridSearchEN  0.3
    Best Parameter l1_ratio Session_T VanillaEN:  0.75





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.411 seconds)


.. _sphx_glr_download_auto_examples_advanced_examples_plot_grid_search_withinsession.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_grid_search_withinsession.py <plot_grid_search_withinsession.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_grid_search_withinsession.ipynb <plot_grid_search_withinsession.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
