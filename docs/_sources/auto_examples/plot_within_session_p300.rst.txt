
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_within_session_p300.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_within_session_p300.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_within_session_p300.py:


===========================
Within Session P300
===========================

This example shows how to perform a within session analysis on three different
P300 datasets.

We will compare two pipelines :

- Riemannian geometry
- XDAWN with Linear Discriminant Analysis

We will use the P300 paradigm, which uses the AUC as metric.

.. GENERATED FROM PYTHON SOURCE LINES 17-38

.. code-block:: default

    # Authors: Pedro Rodrigues <pedro.rodrigues01@gmail.com>
    #
    # License: BSD (3-clause)

    import warnings

    import matplotlib.pyplot as plt
    import numpy as np
    import seaborn as sns
    from pyriemann.estimation import Xdawn, XdawnCovariances
    from pyriemann.tangentspace import TangentSpace
    from sklearn.base import BaseEstimator, TransformerMixin
    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.pipeline import make_pipeline

    import moabb
    from moabb.datasets import BNCI2014009
    from moabb.evaluations import WithinSessionEvaluation
    from moabb.paradigms import P300









.. GENERATED FROM PYTHON SOURCE LINES 39-40

getting rid of the warnings about the future

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: default

    warnings.simplefilter(action="ignore", category=FutureWarning)
    warnings.simplefilter(action="ignore", category=RuntimeWarning)

    moabb.set_log_level("info")








.. GENERATED FROM PYTHON SOURCE LINES 46-50

This is an auxiliary transformer that allows one to vectorize data
structures in a pipeline For instance, in the case of an X with dimensions
Nt x Nc x Ns, one might be interested in a new data structure with
dimensions Nt x (Nc.Ns)

.. GENERATED FROM PYTHON SOURCE LINES 50-65

.. code-block:: default



    class Vectorizer(BaseEstimator, TransformerMixin):
        def __init__(self):
            pass

        def fit(self, X, y):
            """fit."""
            return self

        def transform(self, X):
            """transform."""
            return np.reshape(X, (X.shape[0], -1))









.. GENERATED FROM PYTHON SOURCE LINES 66-70

Create Pipelines
----------------

Pipelines must be a dict of sklearn pipeline transformer.

.. GENERATED FROM PYTHON SOURCE LINES 70-74

.. code-block:: default



    pipelines = {}








.. GENERATED FROM PYTHON SOURCE LINES 75-78

We have to do this because the classes are called 'Target' and 'NonTarget'
but the evaluation function uses a LabelEncoder, transforming them
to 0 and 1

.. GENERATED FROM PYTHON SOURCE LINES 78-92

.. code-block:: default

    labels_dict = {"Target": 1, "NonTarget": 0}

    pipelines["RG+LDA"] = make_pipeline(
        XdawnCovariances(
            nfilter=2, classes=[labels_dict["Target"]], estimator="lwf", xdawn_estimator="scm"
        ),
        TangentSpace(),
        LDA(solver="lsqr", shrinkage="auto"),
    )

    pipelines["Xdw+LDA"] = make_pipeline(
        Xdawn(nfilter=2, estimator="scm"), Vectorizer(), LDA(solver="lsqr", shrinkage="auto")
    )








.. GENERATED FROM PYTHON SOURCE LINES 93-103

Evaluation
----------

We define the paradigm (P300) and use all three datasets available for it.
The evaluation will return a DataFrame containing a single AUC score for
each subject / session of the dataset, and for each pipeline.

Results are saved into the database, so that if you add a new pipeline, it
will not run again the evaluation unless a parameter has changed. Results can
be overwritten if necessary.

.. GENERATED FROM PYTHON SOURCE LINES 103-114

.. code-block:: default


    paradigm = P300(resample=128)
    dataset = BNCI2014009()
    dataset.subject_list = dataset.subject_list[:2]
    datasets = [dataset]
    overwrite = True  # set to True if we want to overwrite cached results
    evaluation = WithinSessionEvaluation(
        paradigm=paradigm, datasets=datasets, suffix="examples", overwrite=overwrite
    )
    results = evaluation.process(pipelines)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    009-2014-WithinSession:   0%|          | 0/2 [00:00<?, ?it/s]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s]
      0%|                                     | 8.19k/18.5M [00:00<04:37, 66.6kB/s]
      0%|                                      | 24.6k/18.5M [00:00<02:59, 103kB/s]
      0%|                                     | 35.8k/18.5M [00:00<03:10, 97.1kB/s]
      0%|                                     | 46.1k/18.5M [00:00<03:21, 91.8kB/s]
      0%|                                     | 56.3k/18.5M [00:00<03:31, 87.4kB/s]
      0%|▏                                    | 65.5k/18.5M [00:00<03:41, 83.2kB/s]
      0%|▏                                    | 80.9k/18.5M [00:00<03:12, 96.0kB/s]
      1%|▏                                     | 96.3k/18.5M [00:01<02:57, 104kB/s]
      1%|▏                                      | 113k/18.5M [00:01<02:43, 112kB/s]
      1%|▎                                      | 128k/18.5M [00:01<02:39, 115kB/s]
      1%|▎                                      | 144k/18.5M [00:01<02:33, 120kB/s]
      1%|▎                                      | 161k/18.5M [00:01<02:28, 123kB/s]
      1%|▍                                      | 184k/18.5M [00:01<02:22, 129kB/s]
      1%|▍                                      | 209k/18.5M [00:01<02:04, 148kB/s]
      1%|▍                                      | 224k/18.5M [00:01<02:10, 140kB/s]
      1%|▌                                      | 249k/18.5M [00:02<01:56, 156kB/s]
      1%|▌                                      | 272k/18.5M [00:02<01:50, 165kB/s]
      2%|▌                                      | 296k/18.5M [00:02<01:46, 172kB/s]
      2%|▋                                      | 321k/18.5M [00:02<01:41, 179kB/s]
      2%|▋                                      | 344k/18.5M [00:02<01:40, 182kB/s]
      2%|▊                                      | 369k/18.5M [00:02<01:37, 186kB/s]
      2%|▊                                      | 400k/18.5M [00:02<01:28, 206kB/s]
      2%|▉                                      | 432k/18.5M [00:02<01:22, 220kB/s]
      3%|▉                                      | 465k/18.5M [00:03<01:17, 232kB/s]
      3%|█                                      | 497k/18.5M [00:03<01:15, 238kB/s]
      3%|█                                      | 528k/18.5M [00:03<01:14, 242kB/s]
      3%|█▏                                     | 568k/18.5M [00:03<01:07, 265kB/s]
      3%|█▎                                     | 600k/18.5M [00:03<01:08, 262kB/s]
      3%|█▎                                     | 640k/18.5M [00:03<01:04, 278kB/s]
      4%|█▍                                     | 680k/18.5M [00:03<01:01, 290kB/s]
      4%|█▌                                     | 728k/18.5M [00:03<00:56, 318kB/s]
      4%|█▋                                     | 776k/18.5M [00:04<00:52, 337kB/s]
      4%|█▋                                     | 824k/18.5M [00:04<00:50, 351kB/s]
      5%|█▊                                     | 881k/18.5M [00:04<00:46, 380kB/s]
      5%|█▉                                     | 936k/18.5M [00:04<00:44, 398kB/s]
      5%|██                                    | 1.01M/18.5M [00:04<00:38, 452kB/s]
      6%|██▏                                   | 1.07M/18.5M [00:04<00:37, 466kB/s]
      6%|██▎                                   | 1.14M/18.5M [00:04<00:34, 500kB/s]
      7%|██▌                                   | 1.22M/18.5M [00:04<00:32, 540kB/s]
      7%|██▋                                   | 1.30M/18.5M [00:05<00:30, 569kB/s]
      8%|██▊                                   | 1.39M/18.5M [00:05<00:28, 608kB/s]
      8%|███                                   | 1.49M/18.5M [00:05<00:26, 655kB/s]
      9%|███▏                                  | 1.58M/18.5M [00:05<00:24, 685kB/s]
      9%|███▍                                  | 1.70M/18.5M [00:05<00:22, 749kB/s]
     10%|███▋                                  | 1.81M/18.5M [00:05<00:21, 790kB/s]
     10%|███▉                                  | 1.93M/18.5M [00:05<00:19, 839kB/s]
     11%|████▏                                 | 2.06M/18.5M [00:05<00:18, 893kB/s]
     12%|████▍                                 | 2.19M/18.5M [00:06<00:17, 951kB/s]
     13%|████▋                                | 2.34M/18.5M [00:06<00:16, 1.01MB/s]
     13%|████▉                                | 2.49M/18.5M [00:06<00:15, 1.07MB/s]
     14%|█████▎                               | 2.65M/18.5M [00:06<00:14, 1.13MB/s]
     15%|█████▌                               | 2.82M/18.5M [00:06<00:13, 1.21MB/s]
     16%|█████▉                               | 3.00M/18.5M [00:06<00:12, 1.27MB/s]
     17%|██████▍                              | 3.19M/18.5M [00:06<00:11, 1.35MB/s]
     18%|██████▊                              | 3.39M/18.5M [00:06<00:10, 1.42MB/s]
     19%|███████▏                             | 3.60M/18.5M [00:07<00:09, 1.50MB/s]
     21%|███████▋                             | 3.82M/18.5M [00:07<00:09, 1.58MB/s]
     22%|████████                             | 4.06M/18.5M [00:07<00:08, 1.66MB/s]
     23%|████████▌                            | 4.30M/18.5M [00:07<00:08, 1.75MB/s]
     25%|█████████                            | 4.55M/18.5M [00:07<00:07, 1.83MB/s]
     26%|█████████▋                           | 4.82M/18.5M [00:07<00:07, 1.93MB/s]
     28%|██████████▏                          | 5.11M/18.5M [00:07<00:06, 2.03MB/s]
     29%|██████████▊                          | 5.41M/18.5M [00:07<00:06, 2.13MB/s]
     31%|███████████▍                         | 5.72M/18.5M [00:08<00:05, 2.24MB/s]
     33%|████████████                         | 6.05M/18.5M [00:08<00:05, 2.36MB/s]
     35%|████████████▊                        | 6.39M/18.5M [00:08<00:04, 2.46MB/s]
     36%|█████████████▍                       | 6.75M/18.5M [00:08<00:04, 2.59MB/s]
     39%|██████████████▎                      | 7.14M/18.5M [00:08<00:04, 2.72MB/s]
     41%|███████████████                      | 7.54M/18.5M [00:08<00:03, 2.86MB/s]
     43%|███████████████▉                     | 7.96M/18.5M [00:08<00:03, 3.01MB/s]
     45%|████████████████▊                    | 8.40M/18.5M [00:08<00:03, 3.16MB/s]
     48%|█████████████████▋                   | 8.86M/18.5M [00:09<00:02, 3.30MB/s]
     50%|██████████████████▋                  | 9.34M/18.5M [00:09<00:02, 3.47MB/s]
     53%|███████████████████▋                 | 9.85M/18.5M [00:09<00:02, 3.64MB/s]
     56%|████████████████████▋                | 10.4M/18.5M [00:09<00:02, 3.82MB/s]
     59%|█████████████████████▊               | 10.9M/18.5M [00:09<00:01, 4.02MB/s]
     62%|███████████████████████              | 11.5M/18.5M [00:09<00:01, 4.22MB/s]
     66%|████████████████████████▎            | 12.2M/18.5M [00:09<00:01, 4.43MB/s]
     69%|█████████████████████████▌           | 12.8M/18.5M [00:09<00:01, 4.65MB/s]
     73%|██████████████████████████▉          | 13.5M/18.5M [00:10<00:01, 4.88MB/s]
     77%|████████████████████████████▎        | 14.2M/18.5M [00:10<00:00, 5.13MB/s]
     81%|█████████████████████████████▊       | 14.9M/18.5M [00:10<00:00, 5.37MB/s]
     85%|███████████████████████████████▍     | 15.7M/18.5M [00:10<00:00, 5.66MB/s]
     89%|█████████████████████████████████    | 16.6M/18.5M [00:10<00:00, 5.93MB/s]
     94%|██████████████████████████████████▊  | 17.4M/18.5M [00:10<00:00, 6.23MB/s]
     99%|████████████████████████████████████▋| 18.3M/18.5M [00:10<00:00, 6.54MB/s]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 18.5M/18.5M [00:00<00:00, 47.6GB/s]
    009-2014-WithinSession:  50%|#####     | 1/2 [00:21<00:21, 21.52s/it]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s]
      0%|                                     | 8.19k/18.5M [00:00<04:37, 66.7kB/s]
      0%|                                      | 24.6k/18.5M [00:00<03:00, 103kB/s]
      0%|                                     | 34.8k/18.5M [00:00<03:16, 94.3kB/s]
      0%|                                     | 45.1k/18.5M [00:00<03:27, 89.3kB/s]
      0%|                                     | 56.3k/18.5M [00:00<03:26, 89.4kB/s]
      0%|▏                                    | 72.7k/18.5M [00:00<03:21, 91.5kB/s]
      0%|▏                                     | 88.1k/18.5M [00:00<03:03, 101kB/s]
      1%|▏                                      | 104k/18.5M [00:01<02:47, 110kB/s]
      1%|▎                                      | 121k/18.5M [00:01<02:38, 116kB/s]
      1%|▎                                      | 136k/18.5M [00:01<02:35, 118kB/s]
      1%|▎                                      | 153k/18.5M [00:01<02:31, 122kB/s]
      1%|▎                                      | 176k/18.5M [00:01<02:09, 141kB/s]
      1%|▍                                      | 193k/18.5M [00:01<02:12, 138kB/s]
      1%|▍                                      | 216k/18.5M [00:01<01:59, 153kB/s]
      1%|▍                                      | 232k/18.5M [00:01<02:05, 146kB/s]
      1%|▌                                      | 256k/18.5M [00:02<01:55, 159kB/s]
      2%|▌                                      | 281k/18.5M [00:02<01:47, 170kB/s]
      2%|▋                                      | 304k/18.5M [00:02<01:44, 175kB/s]
      2%|▋                                      | 329k/18.5M [00:02<01:40, 181kB/s]
      2%|▊                                      | 360k/18.5M [00:02<01:29, 203kB/s]
      2%|▊                                      | 384k/18.5M [00:02<01:31, 198kB/s]
      2%|▉                                      | 417k/18.5M [00:02<01:23, 217kB/s]
      2%|▉                                      | 440k/18.5M [00:02<01:26, 208kB/s]
      3%|▉                                      | 472k/18.5M [00:03<01:21, 222kB/s]
      3%|█                                      | 512k/18.5M [00:03<01:11, 251kB/s]
      3%|█▏                                     | 545k/18.5M [00:03<01:10, 254kB/s]
      3%|█▏                                     | 585k/18.5M [00:03<01:05, 273kB/s]
      3%|█▎                                     | 625k/18.5M [00:03<01:02, 287kB/s]
      4%|█▍                                     | 665k/18.5M [00:03<01:00, 296kB/s]
      4%|█▍                                     | 705k/18.5M [00:03<00:58, 303kB/s]
      4%|█▌                                     | 753k/18.5M [00:03<00:54, 327kB/s]
      4%|█▋                                     | 801k/18.5M [00:04<00:51, 344kB/s]
      5%|█▊                                     | 849k/18.5M [00:04<00:49, 356kB/s]
      5%|█▉                                     | 904k/18.5M [00:04<00:46, 381kB/s]
      5%|██                                     | 969k/18.5M [00:04<00:41, 421kB/s]
      6%|██                                    | 1.02M/18.5M [00:04<00:40, 427kB/s]
      6%|██▏                                   | 1.10M/18.5M [00:04<00:36, 473kB/s]
      6%|██▍                                   | 1.17M/18.5M [00:04<00:34, 502kB/s]
      7%|██▌                                   | 1.24M/18.5M [00:04<00:33, 523kB/s]
      7%|██▋                                   | 1.33M/18.5M [00:05<00:29, 577kB/s]
      8%|██▉                                   | 1.42M/18.5M [00:05<00:27, 615kB/s]
      8%|███                                   | 1.51M/18.5M [00:05<00:25, 661kB/s]
      9%|███▎                                  | 1.61M/18.5M [00:05<00:24, 692kB/s]
      9%|███▌                                  | 1.71M/18.5M [00:05<00:22, 732kB/s]
     10%|███▊                                  | 1.83M/18.5M [00:05<00:20, 799kB/s]
     11%|████                                  | 1.95M/18.5M [00:05<00:19, 848kB/s]
     11%|████▎                                 | 2.08M/18.5M [00:05<00:18, 899kB/s]
     12%|████▌                                 | 2.22M/18.5M [00:06<00:17, 952kB/s]
     13%|████▊                                 | 2.35M/18.5M [00:06<00:16, 989kB/s]
     14%|█████                                | 2.50M/18.5M [00:06<00:15, 1.06MB/s]
     14%|█████▎                               | 2.66M/18.5M [00:06<00:14, 1.12MB/s]
     15%|█████▋                               | 2.84M/18.5M [00:06<00:13, 1.20MB/s]
     16%|██████                               | 3.02M/18.5M [00:06<00:12, 1.26MB/s]
     17%|██████▍                              | 3.21M/18.5M [00:06<00:11, 1.34MB/s]
     18%|██████▊                              | 3.40M/18.5M [00:06<00:10, 1.40MB/s]
     19%|███████▏                             | 3.61M/18.5M [00:07<00:10, 1.48MB/s]
     21%|███████▋                             | 3.83M/18.5M [00:07<00:09, 1.57MB/s]
     22%|████████                             | 4.06M/18.5M [00:07<00:08, 1.65MB/s]
     23%|████████▌                            | 4.30M/18.5M [00:07<00:08, 1.73MB/s]
     25%|█████████                            | 4.56M/18.5M [00:07<00:07, 1.82MB/s]
     26%|█████████▋                           | 4.83M/18.5M [00:07<00:07, 1.92MB/s]
     28%|██████████▏                          | 5.11M/18.5M [00:07<00:06, 2.02MB/s]
     29%|██████████▊                          | 5.41M/18.5M [00:07<00:06, 2.12MB/s]
     31%|███████████▍                         | 5.73M/18.5M [00:08<00:05, 2.24MB/s]
     33%|████████████                         | 6.06M/18.5M [00:08<00:05, 2.35MB/s]
     35%|████████████▊                        | 6.39M/18.5M [00:08<00:04, 2.45MB/s]
     36%|█████████████▌                       | 6.76M/18.5M [00:08<00:04, 2.59MB/s]
     39%|██████████████▎                      | 7.14M/18.5M [00:08<00:04, 2.71MB/s]
     41%|███████████████                      | 7.54M/18.5M [00:08<00:03, 2.86MB/s]
     43%|███████████████▉                     | 7.95M/18.5M [00:08<00:03, 3.00MB/s]
     45%|████████████████▊                    | 8.39M/18.5M [00:08<00:03, 3.15MB/s]
     48%|█████████████████▋                   | 8.85M/18.5M [00:09<00:02, 3.30MB/s]
     50%|██████████████████▋                  | 9.34M/18.5M [00:09<00:02, 3.47MB/s]
     53%|███████████████████▋                 | 9.84M/18.5M [00:09<00:02, 3.63MB/s]
     56%|████████████████████▋                | 10.4M/18.5M [00:09<00:02, 3.82MB/s]
     59%|█████████████████████▊               | 10.9M/18.5M [00:09<00:01, 4.01MB/s]
     62%|███████████████████████              | 11.5M/18.5M [00:09<00:01, 4.20MB/s]
     66%|████████████████████████▎            | 12.1M/18.5M [00:09<00:01, 4.44MB/s]
     69%|█████████████████████████▌           | 12.8M/18.5M [00:09<00:01, 4.64MB/s]
     73%|██████████████████████████▉          | 13.5M/18.5M [00:10<00:01, 4.87MB/s]
     77%|████████████████████████████▎        | 14.2M/18.5M [00:10<00:00, 5.13MB/s]
     81%|█████████████████████████████▊       | 14.9M/18.5M [00:10<00:00, 5.39MB/s]
     85%|███████████████████████████████▍     | 15.7M/18.5M [00:10<00:00, 5.65MB/s]
     89%|█████████████████████████████████    | 16.6M/18.5M [00:10<00:00, 5.94MB/s]
     94%|██████████████████████████████████▊  | 17.4M/18.5M [00:10<00:00, 6.22MB/s]
     99%|████████████████████████████████████▌| 18.3M/18.5M [00:10<00:00, 6.53MB/s]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 18.5M/18.5M [00:00<00:00, 31.3GB/s]
    009-2014-WithinSession: 100%|##########| 2/2 [00:41<00:00, 20.80s/it]    009-2014-WithinSession: 100%|##########| 2/2 [00:41<00:00, 20.91s/it]




.. GENERATED FROM PYTHON SOURCE LINES 115-119

Plot Results
----------------

Here we plot the results to compare the two pipelines

.. GENERATED FROM PYTHON SOURCE LINES 119-138

.. code-block:: default


    fig, ax = plt.subplots(facecolor="white", figsize=[8, 4])

    sns.stripplot(
        data=results,
        y="score",
        x="pipeline",
        ax=ax,
        jitter=True,
        alpha=0.5,
        zorder=1,
        palette="Set1",
    )
    sns.pointplot(data=results, y="score", x="pipeline", ax=ax, palette="Set1")

    ax.set_ylabel("ROC AUC")
    ax.set_ylim(0.5, 1)

    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_within_session_p300_001.png
   :alt: plot within session p300
   :srcset: /auto_examples/images/sphx_glr_plot_within_session_p300_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  41.989 seconds)


.. _sphx_glr_download_auto_examples_plot_within_session_p300.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_within_session_p300.py <plot_within_session_p300.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_within_session_p300.ipynb <plot_within_session_p300.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
