.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_within_session_p300.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_within_session_p300.py:


===========================
Within Session P300
===========================

This Example shows how to perform a within session analysis on three different
P300 datasets.

We will compare two pipelines :

- Riemannian Geometry
- xDawn with Linear Discriminant Analysis

We will use the P300 paradigm, which uses the AUC as metric.



.. code-block:: default

    # Authors: Pedro Rodrigues <pedro.rodrigues01@gmail.com>
    #
    # License: BSD (3-clause)

    # getting rid of the warnings about the future (on s'en fout !)
    from sklearn.pipeline import make_pipeline
    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.base import BaseEstimator, TransformerMixin
    from pyriemann.tangentspace import TangentSpace
    from pyriemann.estimation import XdawnCovariances, Xdawn
    from moabb.evaluations import WithinSessionEvaluation
    from moabb.paradigms import P300
    from moabb.datasets import EPFLP300
    import moabb
    import numpy as np
    import seaborn as sns
    import matplotlib.pyplot as plt
    import warnings
    warnings.simplefilter(action='ignore', category=FutureWarning)
    warnings.simplefilter(action='ignore', category=RuntimeWarning)


    moabb.set_log_level('info')

    # This is an auxiliary transformer that allows one to vectorize data
    # structures in a pipeline For instance, in the case of a X with dimensions
    # Nt x Nc x Ns, one might be interested in a new data structure with
    # dimensions Nt x (Nc.Ns)


    class Vectorizer(BaseEstimator, TransformerMixin):

        def __init__(self):
            pass

        def fit(self, X, y):
            """fit."""
            return self

        def transform(self, X):
            """transform. """
            return np.reshape(X, (X.shape[0], -1))








Create pipelines
----------------

Pipelines must be a dict of sklearn pipeline transformer.


.. code-block:: default



    pipelines = {}

    # we have to do this because the classes are called 'Target' and 'NonTarget'
    # but the evaluation function uses a LabelEncoder, transforming them
    # to 0 and 1
    labels_dict = {'Target': 1, 'NonTarget': 0}

    pipelines['RG + LDA'] = make_pipeline(
        XdawnCovariances(
            nfilter=2,
            classes=[
                labels_dict['Target']],
            estimator='lwf',
            xdawn_estimator='lwf'),
        TangentSpace(),
        LDA(solver='lsqr', shrinkage='auto'))

    pipelines['Xdw + LDA'] = make_pipeline(Xdawn(nfilter=2, estimator='lwf'),
                                           Vectorizer(), LDA(solver='lsqr',
                                                             shrinkage='auto'))








Evaluation
----------

We define the paradigm (P300) and use all three datasets available for it.
The evaluation will return a dataframe containing a single AUC score for
each subject / session of the dataset, and for each pipeline.

Results are saved into the database, so that if you add a new pipeline, it
will not run again the evaluation unless a parameter has changed. Results can
be overwritten if necessary.


.. code-block:: default


    paradigm = P300(resample=128)
    dataset = EPFLP300()
    dataset.subject_list = dataset.subject_list[:2]
    datasets = [dataset]
    overwrite = True  # set to True if we want to overwrite cached results
    evaluation = WithinSessionEvaluation(paradigm=paradigm,
                                         datasets=datasets,
                                         suffix='examples', overwrite=overwrite)
    results = evaluation.process(pipelines)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    2020-01-15 14:25:43 a97ed8b73994 root[136] INFO Processing dataset: EPFL P300 dataset
    unzip /home/circleci/mne_data/MNE-epflp300-data/groups/m/mm/mmspg/www/BCI/p300/subject1.zip
    2020-01-15 14:29:50 a97ed8b73994 root[136] INFO RG + LDA | EPFL P300 dataset | 1 | session_1: Score 0.776
    2020-01-15 14:29:54 a97ed8b73994 root[136] INFO Xdw + LDA | EPFL P300 dataset | 1 | session_1: Score 0.799
    2020-01-15 14:29:57 a97ed8b73994 root[136] INFO RG + LDA | EPFL P300 dataset | 1 | session_2: Score 0.792
    2020-01-15 14:30:01 a97ed8b73994 root[136] INFO Xdw + LDA | EPFL P300 dataset | 1 | session_2: Score 0.821
    2020-01-15 14:30:04 a97ed8b73994 root[136] INFO RG + LDA | EPFL P300 dataset | 1 | session_3: Score 0.757
    2020-01-15 14:30:08 a97ed8b73994 root[136] INFO Xdw + LDA | EPFL P300 dataset | 1 | session_3: Score 0.757
    2020-01-15 14:30:11 a97ed8b73994 root[136] INFO RG + LDA | EPFL P300 dataset | 1 | session_4: Score 0.696
    2020-01-15 14:30:17 a97ed8b73994 root[136] INFO Xdw + LDA | EPFL P300 dataset | 1 | session_4: Score 0.666
    unzip /home/circleci/mne_data/MNE-epflp300-data/groups/m/mm/mmspg/www/BCI/p300/subject2.zip
    2020-01-15 14:35:02 a97ed8b73994 root[136] INFO RG + LDA | EPFL P300 dataset | 2 | session_1: Score 0.678
    2020-01-15 14:35:08 a97ed8b73994 root[136] INFO Xdw + LDA | EPFL P300 dataset | 2 | session_1: Score 0.677
    2020-01-15 14:35:11 a97ed8b73994 root[136] INFO RG + LDA | EPFL P300 dataset | 2 | session_2: Score 0.678
    2020-01-15 14:35:22 a97ed8b73994 root[136] INFO Xdw + LDA | EPFL P300 dataset | 2 | session_2: Score 0.698
    2020-01-15 14:35:25 a97ed8b73994 root[136] INFO RG + LDA | EPFL P300 dataset | 2 | session_3: Score 0.616
    2020-01-15 14:35:38 a97ed8b73994 root[136] INFO Xdw + LDA | EPFL P300 dataset | 2 | session_3: Score 0.598
    2020-01-15 14:35:41 a97ed8b73994 root[136] INFO RG + LDA | EPFL P300 dataset | 2 | session_4: Score 0.594
    2020-01-15 14:35:46 a97ed8b73994 root[136] INFO Xdw + LDA | EPFL P300 dataset | 2 | session_4: Score 0.687




Plot Results
----------------

Here we plot the results.


.. code-block:: default


    fig, ax = plt.subplots(facecolor='white', figsize=[8, 4])

    sns.stripplot(data=results, y='score', x='pipeline', ax=ax, jitter=True,
                  alpha=.5, zorder=1, palette="Set1")
    sns.pointplot(data=results, y='score', x='pipeline', ax=ax,
                  zorder=1, palette="Set1")

    ax.set_ylabel('ROC AUC')
    ax.set_ylim(0.5, 1)

    fig.show()



.. image:: /auto_examples/images/sphx_glr_plot_within_session_p300_001.png
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 10 minutes  3.459 seconds)


.. _sphx_glr_download_auto_examples_plot_within_session_p300.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_within_session_p300.py <plot_within_session_p300.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_within_session_p300.ipynb <plot_within_session_p300.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
