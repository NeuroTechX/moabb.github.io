
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/learning_curve/plot_learning_curve_motor_imagery.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_learning_curve_plot_learning_curve_motor_imagery.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_learning_curve_plot_learning_curve_motor_imagery.py:


================================================
Within Session Motor Imagery with Learning Curve
================================================

This example shows how to perform a within session motor imagery analysis on the
very popular dataset 2a from the BCI competition IV.

We will compare two pipelines :

- CSP + LDA
- Riemannian Geometry + Logistic Regression

We will use the LeftRightImagery paradigm. This will restrict the analysis
to two classes (left- vs right-hand) and use AUC as metric.

.. GENERATED FROM PYTHON SOURCE LINES 17-40

.. code-block:: default

    # Original author: Alexandre Barachant <alexandre.barachant@gmail.com>
    # Learning curve modification: Jan Sosulski
    #
    # License: BSD (3-clause)

    import matplotlib.pyplot as plt
    import numpy as np
    import seaborn as sns
    from mne.decoding import CSP
    from pyriemann.estimation import Covariances
    from pyriemann.tangentspace import TangentSpace
    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.linear_model import LogisticRegression
    from sklearn.pipeline import make_pipeline

    import moabb
    from moabb.datasets import BNCI2014001
    from moabb.evaluations import WithinSessionEvaluation
    from moabb.paradigms import LeftRightImagery


    moabb.set_log_level("info")








.. GENERATED FROM PYTHON SOURCE LINES 41-51

Create Pipelines
----------------

Pipelines must be a dict of sklearn pipeline transformer.

The CSP implementation from MNE is used. We selected 8 CSP components, as
usually done in the litterature.

The Riemannian geometry pipeline consists in covariance estimation, tangent
space mapping and finally a logistic regression for the classification.

.. GENERATED FROM PYTHON SOURCE LINES 51-62

.. code-block:: default


    pipelines = {}

    pipelines["CSP+LDA"] = make_pipeline(
        CSP(n_components=8), LDA(solver="lsqr", shrinkage="auto")
    )

    pipelines["RG+LR"] = make_pipeline(
        Covariances(), TangentSpace(), LogisticRegression(solver="lbfgs")
    )








.. GENERATED FROM PYTHON SOURCE LINES 63-73

Evaluation
----------

We define the paradigm (LeftRightImagery) and the dataset (BNCI2014001).
The evaluation will return a DataFrame containing a single AUC score for
each subject / session of the dataset, and for each pipeline.

Results are saved into the database, so that if you add a new pipeline, it
will not run again the evaluation unless a parameter has changed. Results can
be overwritten if necessary.

.. GENERATED FROM PYTHON SOURCE LINES 73-96

.. code-block:: default


    paradigm = LeftRightImagery()
    dataset = BNCI2014001()
    dataset.subject_list = dataset.subject_list[:1]
    datasets = [dataset]
    overwrite = True  # set to True if we want to overwrite cached results
    # Evaluate for a specific number of training samples per class
    data_size = dict(policy="per_class", value=np.array([5, 10, 30, 50]))
    # When the training data is sparse, peform more permutations than when we have a lot of data
    n_perms = np.floor(np.geomspace(20, 2, len(data_size["value"]))).astype(int)
    evaluation = WithinSessionEvaluation(
        paradigm=paradigm,
        datasets=datasets,
        suffix="examples",
        overwrite=overwrite,
        data_size=data_size,
        n_perms=n_perms,
    )

    results = evaluation.process(pipelines)

    print(results.head())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    001-2014-WithinSession:   0%|          | 0/1 [00:00<?, ?it/s]    001-2014-WithinSession: 100%|##########| 1/1 [00:12<00:00, 12.24s/it]    001-2014-WithinSession: 100%|##########| 1/1 [00:12<00:00, 12.24s/it]
          score      time  samples  ...  n_sessions   dataset pipeline
    0  0.976190  0.028280     10.0  ...           2  001-2014    RG+LR
    1  0.976190  0.040028     20.0  ...           2  001-2014    RG+LR
    2  0.990476  0.108539     60.0  ...           2  001-2014    RG+LR
    3  1.000000  0.153936    100.0  ...           2  001-2014    RG+LR
    4  0.961905  0.049976     10.0  ...           2  001-2014    RG+LR

    [5 rows x 11 columns]




.. GENERATED FROM PYTHON SOURCE LINES 97-102

Plot Results
------------

We plot the accuracy as a function of the number of training samples, for
each pipeline

.. GENERATED FROM PYTHON SOURCE LINES 102-121

.. code-block:: default


    fig, ax = plt.subplots(facecolor="white", figsize=[8, 4])

    n_subs = len(dataset.subject_list)

    if n_subs > 1:
        r = results.groupby(["pipeline", "subject", "data_size"]).mean().reset_index()
    else:
        r = results

    sns.pointplot(data=r, x="data_size", y="score", hue="pipeline", ax=ax, palette="Set1")

    errbar_meaning = "subjects" if n_subs > 1 else "permutations"
    title_str = f"Errorbar shows Mean-CI across {errbar_meaning}"
    ax.set_xlabel("Amount of training samples")
    ax.set_ylabel("ROC AUC")
    ax.set_title(title_str)
    fig.tight_layout()
    plt.show()



.. image-sg:: /auto_examples/learning_curve/images/sphx_glr_plot_learning_curve_motor_imagery_001.png
   :alt: Errorbar shows Mean-CI across permutations
   :srcset: /auto_examples/learning_curve/images/sphx_glr_plot_learning_curve_motor_imagery_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.588 seconds)


.. _sphx_glr_download_auto_examples_learning_curve_plot_learning_curve_motor_imagery.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_learning_curve_motor_imagery.py <plot_learning_curve_motor_imagery.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_learning_curve_motor_imagery.ipynb <plot_learning_curve_motor_imagery.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
