
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_braindecode.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_braindecode.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_braindecode.py:


===============================================================
Cross-session motor imagery with deep learning EEGNet v4 model
===============================================================
This example shows how to use BrainDecode in combination with MOABB evaluation.
In this example, we use the architecture EEGNetv4.

.. GENERATED FROM PYTHON SOURCE LINES 8-41

.. code-block:: default

    # Authors: Igor Carrara <igor.carrara@inria.fr>
    #          Bruno Aristimunha <b.aristimunha@gmail.com>
    #
    # License: BSD (3-clause)

    import matplotlib.pyplot as plt
    import mne
    import seaborn as sns
    import torch
    from braindecode import EEGClassifier
    from braindecode.models import EEGNetv4
    from sklearn.pipeline import Pipeline
    from skorch.callbacks import EarlyStopping, EpochScoring
    from skorch.dataset import ValidSplit

    from moabb.datasets import BNCI2014001
    from moabb.evaluations import CrossSessionEvaluation
    from moabb.paradigms import MotorImagery
    from moabb.pipelines.utils_pytorch import BraindecodeDatasetLoader, InputShapeSetterEEG
    from moabb.utils import setup_seed


    mne.set_log_level(False)

    # Print Information PyTorch
    print(f"Torch Version: {torch.__version__}")

    # Set up GPU if it is there
    cuda = torch.cuda.is_available()
    device = "cuda" if cuda else "cpu"
    print("GPU is", "AVAILABLE" if cuda else "NOT AVAILABLE")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Torch Version: 1.13.1+cu117
    GPU is NOT AVAILABLE




.. GENERATED FROM PYTHON SOURCE LINES 42-56

In this example, we will use only the dataset ``BNCI2014001``.

Running the benchmark
---------------------

This example uses the CrossSession evaluation procedure. We focus on the dataset BNCI2014001 and only on 1 subject
to reduce computational time.

To keep the computational time low, the epoch is reduced. In a real situation, we suggest using the following:
EPOCH = 1000
PATIENCE = 300

This code is implemented to run on the CPU. If you're using a GPU, do not use multithreading
(i.e. set n_jobs=1)

.. GENERATED FROM PYTHON SOURCE LINES 56-89

.. code-block:: default



    # Set random seed to be able to reproduce results
    seed = 42
    setup_seed(seed)

    # Ensure that all operations are deterministic on GPU (if used) for reproducibility
    torch.backends.cudnn.deterministic = True
    torch.backends.cudnn.benchmark = False


    # Hyperparameter
    LEARNING_RATE = 0.0625 * 0.01  # parameter taken from Braindecode
    WEIGHT_DECAY = 0  # parameter taken from Braindecode
    BATCH_SIZE = 64  # parameter taken from BrainDecode
    EPOCH = 10
    PATIENCE = 3
    fmin = 4
    fmax = 100
    tmin = 0
    tmax = None

    # Load the dataset
    dataset = BNCI2014001()
    events = ["right_hand", "left_hand"]
    paradigm = MotorImagery(
        events=events, n_classes=len(events), fmin=fmin, fmax=fmax, tmin=tmin, tmax=tmax
    )
    subjects = [1]
    X, _, _ = paradigm.get_data(dataset=dataset, subjects=subjects)
    # Define Transformer of Dataset compatible with Brain Decode
    create_dataset = BraindecodeDatasetLoader()








.. GENERATED FROM PYTHON SOURCE LINES 90-98

Create Pipelines
----------------
In order to create a pipeline, we need to load a model from braindecode.
the second step is to define a skorch model using EEGClassifier from braindecode
that allows converting the PyTorch model in a scikit-learn classifier.
Initialize the model's parameter as a dummy value since this parameter will be set dynamically using the
callbacks InputShapeSetterEEG, where we have to specify the correct name of the parameter.
Here, we will use the EEGNet v4 model [1]_ .

.. GENERATED FROM PYTHON SOURCE LINES 98-135

.. code-block:: default


    model = EEGNetv4(in_chans=1, n_classes=1, input_window_samples=100)

    # Send model to GPU
    if cuda:
        model.cuda()

    # Define a Skorch classifier
    clf = EEGClassifier(
        module=model,
        criterion=torch.nn.CrossEntropyLoss,
        optimizer=torch.optim.Adam,
        optimizer__lr=LEARNING_RATE,
        batch_size=BATCH_SIZE,
        max_epochs=EPOCH,
        train_split=ValidSplit(0.2, random_state=seed),
        device=device,
        callbacks=[
            EarlyStopping(monitor="valid_loss", patience=PATIENCE),
            EpochScoring(
                scoring="accuracy", on_train=True, name="train_acc", lower_is_better=False
            ),
            EpochScoring(
                scoring="accuracy", on_train=False, name="valid_acc", lower_is_better=False
            ),
            InputShapeSetterEEG(
                params_list=["in_chans", "input_window_samples", "n_classes"],
            ),
        ],
        verbose=1,  # Not printing the results for each epoch
    )

    # Create the pipelines
    pipes = {}
    pipes["EEGNetV4"] = Pipeline([("Braindecode_dataset", create_dataset), ("Net", clf)])









.. GENERATED FROM PYTHON SOURCE LINES 136-138

Evaluation
----------

.. GENERATED FROM PYTHON SOURCE LINES 138-153

.. code-block:: default

    dataset.subject_list = dataset.subject_list[:2]

    evaluation = CrossSessionEvaluation(
        paradigm=paradigm,
        datasets=dataset,
        suffix="braindecode_example",
        overwrite=True,
        return_epochs=True,
        n_jobs=1,
    )

    results = evaluation.process(pipes)

    print(results.head())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/moabb/moabb/moabb/analysis/results.py:88: RuntimeWarning: Setting non-standard config type: "MOABB_RESULTS"
      set_config("MOABB_RESULTS", osp.join(osp.expanduser("~"), "mne_data"))
    001-2014-CrossSession:   0%|          | 0/2 [00:00<?, ?it/s]Re-initializing module because the following parameters were re-set: module.
    Re-initializing criterion.
    Re-initializing optimizer.
      epoch    train_acc    train_loss    valid_acc    valid_loss     dur
    -------  -----------  ------------  -----------  ------------  ------
          1       0.5312        0.6930       0.5172        0.6931  0.3581
          2       0.5156        0.6931       0.4828        0.6932  0.3728
          3       0.5156        0.6932       0.4828        0.6932  0.3751
    Stopping since valid_loss has not improved in the last 3 epochs.
    Re-initializing module because the following parameters were re-set: module.
    Re-initializing criterion.
    Re-initializing optimizer.
      epoch    train_acc    train_loss    valid_acc    valid_loss     dur
    -------  -----------  ------------  -----------  ------------  ------
          1       0.5000        0.6937       0.4828        0.6932  0.3213
          2       0.6562        0.6926       0.4828        0.6932  0.5772
          3       0.5156        0.6933       0.4828        0.6932  1.0102
    Stopping since valid_loss has not improved in the last 3 epochs.
    001-2014-CrossSession:  50%|#####     | 1/2 [00:11<00:11, 11.01s/it]Re-initializing module because the following parameters were re-set: module.
    Re-initializing criterion.
    Re-initializing optimizer.
      epoch    train_acc    train_loss    valid_acc    valid_loss     dur
    -------  -----------  ------------  -----------  ------------  ------
          1       0.4688        0.6936       0.5172        0.6931  0.3950
          2       0.4844        0.6935       0.5172        0.6930  0.3588
          3       0.4531        0.6929       0.5172        0.6930  0.3610
          4       0.4688        0.6934       0.5172        0.6929  0.3663
          5       0.6406        0.6913       0.5172        0.6929  0.3743
          6       0.5312        0.6917       0.5172        0.6929  0.3709
          7       0.4531        0.6929       0.5172        0.6928  0.3457
          8       0.4688        0.6928       0.5172        0.6928  0.3623
          9       0.5156        0.6911       0.5172        0.6928  0.3500
    Stopping since valid_loss has not improved in the last 3 epochs.
    Re-initializing module because the following parameters were re-set: module.
    Re-initializing criterion.
    Re-initializing optimizer.
      epoch    train_acc    train_loss    valid_acc    valid_loss     dur
    -------  -----------  ------------  -----------  ------------  ------
          1       0.4844        0.6938       0.5172        0.6931  0.3700
          2       0.5625        0.6925       0.5172        0.6930  0.3713
          3       0.5312        0.6927       0.5172        0.6930  0.3576
    Stopping since valid_loss has not improved in the last 3 epochs.
    001-2014-CrossSession: 100%|##########| 2/2 [00:23<00:00, 11.85s/it]    001-2014-CrossSession: 100%|##########| 2/2 [00:23<00:00, 11.73s/it]
          score      time  samples  ... n_sessions   dataset  pipeline
    0  0.462577  3.444659    144.0  ...          2  001-2014  EEGNetV4
    1  0.478106  4.379939    144.0  ...          2  001-2014  EEGNetV4
    2  0.463638  5.817178    144.0  ...          2  001-2014  EEGNetV4
    3  0.555363  3.419864    144.0  ...          2  001-2014  EEGNetV4

    [4 rows x 9 columns]




.. GENERATED FROM PYTHON SOURCE LINES 154-156

Plot Results
----------------

.. GENERATED FROM PYTHON SOURCE LINES 156-159

.. code-block:: default

    plt.figure()
    sns.barplot(data=results, y="score", x="subject", palette="viridis")
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_braindecode_001.png
   :alt: plot braindecode
   :srcset: /auto_examples/images/sphx_glr_plot_braindecode_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 160-167

References
----------
.. [1] Lawhern, V. J., Solon, A. J., Waytowich, N. R., Gordon, S. M.,
   Hung, C. P., & Lance, B. J. (2018). `EEGNet: a compact convolutional neural
   network for EEG-based brain-computer interfaces.
   <https://doi.org/10.1088/1741-2552/aace8c>`_
   Journal of neural engineering, 15(5), 056013.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  26.738 seconds)


.. _sphx_glr_download_auto_examples_plot_braindecode.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_braindecode.py <plot_braindecode.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_braindecode.ipynb <plot_braindecode.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
