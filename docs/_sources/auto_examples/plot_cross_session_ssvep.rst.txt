
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_cross_session_ssvep.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_cross_session_ssvep.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_cross_session_ssvep.py:


===================
Cross Session SSVEP
===================

This Example show how to perform a cross-session SSVEP analysis on the
MAMEM dataset 3, using a CCA pipeline.

The cross session evaluation context will evaluate performance using a leave
one session out cross-validation. For each session in the dataset, a model
is trained on every other session and performance are evaluated on the current
session.

.. GENERATED FROM PYTHON SOURCE LINES 14-35

.. code-block:: default

    # Authors: Sylvain Chevallier <sylvain.chevallier@uvsq.fr>
    #
    # License: BSD (3-clause)

    import warnings

    import matplotlib.pyplot as plt
    import seaborn as sns
    from sklearn.pipeline import make_pipeline

    import moabb
    from moabb.datasets import MAMEM3
    from moabb.evaluations import CrossSessionEvaluation
    from moabb.paradigms import SSVEP
    from moabb.pipelines import SSVEP_CCA


    warnings.simplefilter(action="ignore", category=FutureWarning)
    warnings.simplefilter(action="ignore", category=RuntimeWarning)
    moabb.set_log_level("info")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'rocket' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'rocket_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'mako' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'mako_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'icefire' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'icefire_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'vlag' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'vlag_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'flare' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'flare_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'crest' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'crest_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)




.. GENERATED FROM PYTHON SOURCE LINES 36-40

Loading dataset
---------------

Load 2 subjects of MAMEM3 dataset, with 3 session each

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: default


    subj = [1, 3]
    dataset = MAMEM3()
    dataset.subject_list = subj








.. GENERATED FROM PYTHON SOURCE LINES 46-52

Choose paradigm
---------------

We select the paradigm SSVEP, applying a bandpass filter (3-15 Hz) on
the data and we keep only the first 3 classes, that is stimulation
frequency of 6.66, 7.50 and 8.57 Hz.

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: default


    paradigm = SSVEP(fmin=3, fmax=15, n_classes=3)








.. GENERATED FROM PYTHON SOURCE LINES 56-60

Create pipelines
----------------

Use a Canonical Correlation Analysis classifier

.. GENERATED FROM PYTHON SOURCE LINES 60-67

.. code-block:: default


    interval = dataset.interval
    freqs = paradigm.used_events(dataset)

    pipeline = {}
    pipeline["CCA"] = make_pipeline(SSVEP_CCA(interval=interval, freqs=freqs, n_harmonics=3))








.. GENERATED FROM PYTHON SOURCE LINES 68-78

Get data (optional)
-------------------

To get access to the EEG signals downloaded from the dataset, you could
use `dataset.get_data(subjects=[subject_id])` to obtain the EEG under
MNE format, stored in a dictionary of sessions and runs.
Otherwise, `paradigm.get_data(dataset=dataset, subjects=[subject_id])`
allows to obtain the EEG data in scikit format, the labels and the meta
information. In `paradigm.get_data`, the EEG are preprocessed according
to the paradigm requirement.

.. GENERATED FROM PYTHON SOURCE LINES 78-82

.. code-block:: default


    # sessions = dataset.get_data(subjects=[3])
    # X, labels, meta = paradigm.get_data(dataset=dataset, subjects=[3])








.. GENERATED FROM PYTHON SOURCE LINES 83-88

Evaluation
----------

The evaluation will return a dataframe containing a single AUC score for
each subject / session of the dataset, and for each pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 88-98

.. code-block:: default


    overwrite = True  # set to True if we want to overwrite cached results

    evaluation = CrossSessionEvaluation(
        paradigm=paradigm, datasets=dataset, suffix="examples", overwrite=overwrite
    )
    results = evaluation.process(pipeline)

    print(results.head())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

          score      time  samples  ... n_sessions       dataset  pipeline
    0  0.777778  0.072644     36.0  ...          5  SSVEP MAMEM3       CCA
    1  0.666667  0.068806     36.0  ...          5  SSVEP MAMEM3       CCA
    2  1.000000  0.070559     36.0  ...          5  SSVEP MAMEM3       CCA
    3  0.333333  0.072611     36.0  ...          5  SSVEP MAMEM3       CCA
    4  0.666667  0.065947     36.0  ...          5  SSVEP MAMEM3       CCA

    [5 rows x 9 columns]




.. GENERATED FROM PYTHON SOURCE LINES 99-103

Plot Results
----------------

Here we plot the results, indicating the score for each session and subject

.. GENERATED FROM PYTHON SOURCE LINES 103-108

.. code-block:: default


    plt.figure()
    sns.barplot(data=results, y="score", x="session", hue="subject", palette="viridis")

    plt.show()



.. image:: /auto_examples/images/sphx_glr_plot_cross_session_ssvep_001.png
    :alt: plot cross session ssvep
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  33.120 seconds)


.. _sphx_glr_download_auto_examples_plot_cross_session_ssvep.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_cross_session_ssvep.py <plot_cross_session_ssvep.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_cross_session_ssvep.ipynb <plot_cross_session_ssvep.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
