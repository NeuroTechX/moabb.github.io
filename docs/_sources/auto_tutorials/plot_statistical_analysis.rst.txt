.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_tutorials_plot_statistical_analysis.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_plot_statistical_analysis.py:

=======================
Statistical Analysis
=======================

The MOABB codebase comes with convenience plotting utilities and some
statistical testing. This tutorial focuses on what those exactly are and how
they can be used.



.. code-block:: default

    # Authors: Vinay Jayaram <vinayjayaram13@gmail.com>
    #
    # License: BSD (3-clause)

    import moabb
    import matplotlib.pyplot as plt
    import moabb.analysis.plotting as moabb_plt
    from moabb.analysis.meta_analysis import (
        find_significant_differences, compute_dataset_statistics)  # noqa: E501

    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.linear_model import LogisticRegression
    from sklearn.pipeline import make_pipeline

    from mne.decoding import CSP

    from pyriemann.estimation import Covariances
    from pyriemann.tangentspace import TangentSpace

    from moabb.datasets import BNCI2014001
    from moabb.paradigms import LeftRightImagery
    from moabb.evaluations import CrossSessionEvaluation

    moabb.set_log_level('info')

    print(__doc__)








Results Generation
---------------------

First we need to set up a paradigm, dataset list, and some pipelines to
test. This is explored more in the examples -- we choose a left vs right
imagery paradigm with a single bandpass. There is only one dataset here but
any number can be added without changing this workflow.

Create pipelines
----------------

Pipelines must be a dict of sklearn pipeline transformer.

The csp implementation from MNE is used. We selected 8 CSP components, as
usually done in the litterature.

The riemannian geometry pipeline consists in covariance estimation, tangent
space mapping and finaly a logistic regression for the classification.


.. code-block:: default


    pipelines = {}

    pipelines['CSP + LDA'] = make_pipeline(CSP(n_components=8), LDA())

    pipelines['RG + LR'] = make_pipeline(Covariances(), TangentSpace(),
                                         LogisticRegression())

    pipelines['CSP + LR'] = make_pipeline(
        CSP(n_components=8), LogisticRegression())

    pipelines['RG + LDA'] = make_pipeline(Covariances(), TangentSpace(), LDA())








Evaluation
----------

We define the paradigm (LeftRightImagery) and the dataset (BNCI2014001).
The evaluation will return a dataframe containing a single AUC score for
each subject / session of the dataset, and for each pipeline.

Results are saved into the database, so that if you add a new pipeline, it
will not run again the evaluation unless a parameter has changed. Results can
be overwritten if necessary.


.. code-block:: default


    paradigm = LeftRightImagery()
    dataset = BNCI2014001()
    dataset.subject_list = dataset.subject_list[:4]
    datasets = [dataset]
    overwrite = False  # set to True if we want to overwrite cached results
    evaluation = CrossSessionEvaluation(
        paradigm=paradigm,
        datasets=datasets,
        suffix='examples',
        overwrite=overwrite)

    results = evaluation.process(pipelines)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    2020-01-15 14:36:34 a97ed8b73994 root[136] INFO Processing dataset: 001-2014
    2020-01-15 14:36:38 a97ed8b73994 root[136] INFO CSP + LR | 001-2014 | 1 | session_E: Score 0.969
    2020-01-15 14:36:40 a97ed8b73994 root[136] INFO CSP + LR | 001-2014 | 1 | session_T: Score 0.954
    2020-01-15 14:36:42 a97ed8b73994 root[136] INFO RG + LDA | 001-2014 | 1 | session_E: Score 0.878
    2020-01-15 14:36:44 a97ed8b73994 root[136] INFO RG + LDA | 001-2014 | 1 | session_T: Score 0.861
    2020-01-15 14:36:49 a97ed8b73994 root[136] INFO CSP + LR | 001-2014 | 2 | session_E: Score 0.629
    2020-01-15 14:36:50 a97ed8b73994 root[136] INFO CSP + LR | 001-2014 | 2 | session_T: Score 0.537
    2020-01-15 14:36:52 a97ed8b73994 root[136] INFO RG + LDA | 001-2014 | 2 | session_E: Score 0.470
    2020-01-15 14:36:54 a97ed8b73994 root[136] INFO RG + LDA | 001-2014 | 2 | session_T: Score 0.513
    2020-01-15 14:36:58 a97ed8b73994 root[136] INFO CSP + LDA | 001-2014 | 3 | session_E: Score 0.996
    2020-01-15 14:36:59 a97ed8b73994 root[136] INFO CSP + LDA | 001-2014 | 3 | session_T: Score 0.994
    2020-01-15 14:37:00 a97ed8b73994 root[136] INFO RG + LR | 001-2014 | 3 | session_E: Score 0.999
    2020-01-15 14:37:01 a97ed8b73994 root[136] INFO RG + LR | 001-2014 | 3 | session_T: Score 0.999
    2020-01-15 14:37:03 a97ed8b73994 root[136] INFO CSP + LR | 001-2014 | 3 | session_E: Score 0.997
    2020-01-15 14:37:04 a97ed8b73994 root[136] INFO CSP + LR | 001-2014 | 3 | session_T: Score 0.994
    2020-01-15 14:37:05 a97ed8b73994 root[136] INFO RG + LDA | 001-2014 | 3 | session_E: Score 0.973
    2020-01-15 14:37:06 a97ed8b73994 root[136] INFO RG + LDA | 001-2014 | 3 | session_T: Score 0.966
    2020-01-15 14:37:11 a97ed8b73994 root[136] INFO CSP + LDA | 001-2014 | 4 | session_E: Score 0.829
    2020-01-15 14:37:13 a97ed8b73994 root[136] INFO CSP + LDA | 001-2014 | 4 | session_T: Score 0.829
    2020-01-15 14:37:14 a97ed8b73994 root[136] INFO RG + LR | 001-2014 | 4 | session_E: Score 0.877
    2020-01-15 14:37:14 a97ed8b73994 root[136] INFO RG + LR | 001-2014 | 4 | session_T: Score 0.858
    2020-01-15 14:37:16 a97ed8b73994 root[136] INFO CSP + LR | 001-2014 | 4 | session_E: Score 0.837
    2020-01-15 14:37:18 a97ed8b73994 root[136] INFO CSP + LR | 001-2014 | 4 | session_T: Score 0.835
    2020-01-15 14:37:18 a97ed8b73994 root[136] INFO RG + LDA | 001-2014 | 4 | session_E: Score 0.721
    2020-01-15 14:37:19 a97ed8b73994 root[136] INFO RG + LDA | 001-2014 | 4 | session_T: Score 0.690




MOABB plotting
----------------

Here we plot the results using some of the convenience methods within the
toolkit.  The score_plot visualizes all the data with one score per subject
for every dataset and pipeline.


.. code-block:: default


    fig = moabb_plt.score_plot(results)
    plt.show()




.. image:: /auto_tutorials/images/sphx_glr_plot_statistical_analysis_001.png
    :class: sphx-glr-single-img





For a comparison of two algorithms, there is the paired_plot, which plots
performance in one versus the performance in the other over all chosen
datasets. Note that there is only one score per subject, regardless of the
number of sessions.


.. code-block:: default


    fig = moabb_plt.paired_plot(results, 'CSP + LDA', 'RG + LDA')
    plt.show()




.. image:: /auto_tutorials/images/sphx_glr_plot_statistical_analysis_002.png
    :class: sphx-glr-single-img





Statistical testing and further plots
----------------------------------------

If the statistical significance of results is of interest, the method
compute_dataset_statistics allows one to show a meta-analysis style plot as
well. For an overview of how all algorithms perform in comparison with each
other, the method find_significant_differences and the summary_plot are
possible.


.. code-block:: default


    stats = compute_dataset_statistics(results)
    P, T = find_significant_differences(stats)








The meta-analysis style plot shows the standardized mean difference within
each tested dataset for the two algorithms in question, in addition to a
meta-effect and significances both per-dataset and overall.


.. code-block:: default

    fig = moabb_plt.meta_analysis_plot(stats, 'CSP + LDA', 'RG + LDA')
    plt.show()




.. image:: /auto_tutorials/images/sphx_glr_plot_statistical_analysis_003.png
    :class: sphx-glr-single-img





The summary plot shows the effect and significance related to the hypothesis
that the algorithm on the y-axis significantly out-performed the algorithm on
the x-axis over all datasets


.. code-block:: default

    moabb_plt.summary_plot(P, T)
    plt.show()



.. image:: /auto_tutorials/images/sphx_glr_plot_statistical_analysis_004.png
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  46.213 seconds)


.. _sphx_glr_download_auto_tutorials_plot_statistical_analysis.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_statistical_analysis.py <plot_statistical_analysis.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_statistical_analysis.ipynb <plot_statistical_analysis.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
