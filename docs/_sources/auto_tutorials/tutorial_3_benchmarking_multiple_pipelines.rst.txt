
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorial_3_benchmarking_multiple_pipelines.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorials_tutorial_3_benchmarking_multiple_pipelines.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorial_3_benchmarking_multiple_pipelines.py:


===========================================
Tutorial 3: Benchmarking mulitple pipelines
===========================================

In this last part, we extend the previous example by assessing the
classification score of not one but three classification pipelines.

.. GENERATED FROM PYTHON SOURCE LINES 9-37

.. code-block:: default

    # Authors: Pedro L. C. Rodrigues, Sylvain Chevallier
    #
    # https://github.com/plcrodrigues/Workshop-MOABB-BCI-Graz-2019

    import warnings

    import matplotlib.pyplot as plt
    import mne
    import seaborn as sns
    from mne.decoding import CSP
    from pyriemann.classification import MDM
    from pyriemann.estimation import Covariances
    from pyriemann.tangentspace import TangentSpace
    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.pipeline import make_pipeline
    from sklearn.svm import SVC

    import moabb
    from moabb.datasets import BNCI2014001, Zhou2016
    from moabb.evaluations import WithinSessionEvaluation
    from moabb.paradigms import LeftRightImagery


    mne.set_log_level("CRITICAL")
    moabb.set_log_level("info")
    warnings.filterwarnings("ignore")









.. GENERATED FROM PYTHON SOURCE LINES 38-47

Creating Pipelines
------------------

We instantiate the three different classiciation pipelines to be considered
in the analysis. The object that gathers each pipeline is a dictionary. The
first pipeline is the CSP+LDA that we have seen in the previous parts. The
other two pipelines rely on Riemannian geometry, using an SVM classification
in the tangent space of the covariance matrices estimated from the EEG or a
MDM classifier that works directly on covariance matrices.

.. GENERATED FROM PYTHON SOURCE LINES 47-55

.. code-block:: default


    pipelines = {}
    pipelines["csp+lda"] = make_pipeline(CSP(n_components=8), LDA())
    pipelines["tgsp+svm"] = make_pipeline(
        Covariances("oas"), TangentSpace(metric="riemann"), SVC(kernel="linear")
    )
    pipelines["MDM"] = make_pipeline(Covariances("oas"), MDM(metric="riemann"))








.. GENERATED FROM PYTHON SOURCE LINES 56-58

The following lines go exactly as in the previous tutorial, where we end up
obtaining a pandas dataframe containing the results of the evaluation.

.. GENERATED FROM PYTHON SOURCE LINES 58-68

.. code-block:: default

    datasets = [BNCI2014001(), Zhou2016()]
    subj = [1, 2, 3]
    for d in datasets:
        d.subject_list = subj
    paradigm = LeftRightImagery()
    evaluation = WithinSessionEvaluation(
        paradigm=paradigm, datasets=datasets, overwrite=False
    )
    results = evaluation.process(pipelines)








.. GENERATED FROM PYTHON SOURCE LINES 69-72

As `overwrite` is set to False, the results from the previous tutorial are reused and
only the new pipelines are evaluated. The results from "csp+lda" are not recomputed.
The results are saved in ~/mne_data/results if the parameter `hdf5_path` is not set.

.. GENERATED FROM PYTHON SOURCE LINES 74-79

Plotting Results
----------------

The following plot shows a comparison of the three classification pipelines
for each subject of each dataset.

.. GENERATED FROM PYTHON SOURCE LINES 79-94

.. code-block:: default


    results["subj"] = [str(resi).zfill(2) for resi in results["subject"]]
    g = sns.catplot(
        kind="bar",
        x="score",
        y="subj",
        hue="pipeline",
        col="dataset",
        height=12,
        aspect=0.5,
        data=results,
        orient="h",
        palette="viridis",
    )
    plt.show()



.. image:: /auto_tutorials/images/sphx_glr_tutorial_3_benchmarking_multiple_pipelines_001.png
    :alt: dataset = 001-2014, dataset = Zhou 2016
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  56.466 seconds)


.. _sphx_glr_download_auto_tutorials_tutorial_3_benchmarking_multiple_pipelines.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tutorial_3_benchmarking_multiple_pipelines.py <tutorial_3_benchmarking_multiple_pipelines.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tutorial_3_benchmarking_multiple_pipelines.ipynb <tutorial_3_benchmarking_multiple_pipelines.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
