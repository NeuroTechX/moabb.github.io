.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_tutorials_plot_Getting_Started.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_plot_Getting_Started.py:

=========================
Getting Started
=========================

This tutorial takes you through a basic working example of how to use this
codebase, including all the different components, up to the results
generation. If you'd like to know about the statistics and plotting, see the
next tutorial.



.. code-block:: default

    # Authors: Vinay Jayaram <vinayjayaram13@gmail.com>
    #
    # License: BSD (3-clause)









Introduction
--------------------
To use the codebase you need an evaluation and a paradigm, some algorithms,
and a list of datasets to run it all on. You can find those in the following
submodules; detailed tutorials are given for each of them.


.. code-block:: default


    from moabb.datasets import BNCI2014001
    from moabb.paradigms import LeftRightImagery
    from moabb.evaluations import CrossSessionEvaluation
    from moabb.datasets import utils








In order to create pipelines within a script, you will likely need at least
the make_pipeline function. They can also be specified via a .yml file. Here
we will make a couple pipelines just for convenience


.. code-block:: default


    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.pipeline import make_pipeline
    from sklearn.svm import SVC
    from sklearn.model_selection import GridSearchCV
    from moabb.pipelines.features import LogVariance
    import numpy as np








If you would like to specify the logging level when it is running, you can
use the standard python logging commands through the top-level moabb module


.. code-block:: default

    import moabb
    moabb.set_log_level('info')








Create pipelines
----------------

We create two pipelines: channel-wise log variance followed by LDA, and
channel-wise log variance followed by a cross-validated SVM (note that a
cross-validation via scikit-learn cannot be described in a .yml file). For
later in the process, the pipelines need to be in a dictionary where the key
is the name of the pipeline and the value is the Pipeline object


.. code-block:: default


    pipelines = {}
    pipelines['AM + LDA'] = make_pipeline(LogVariance(),
                                          LDA())
    parameters = {'C': np.logspace(-2, 2, 10)}
    clf = GridSearchCV(SVC(kernel='linear'), parameters)
    pipe = make_pipeline(LogVariance(), clf)

    pipelines['AM + SVM'] = pipe








Datasets
-----------------

Datasets can be specified in many ways: Each paradigm has a property
'datasets' which returns the datasets that are appropriate for that paradigm


.. code-block:: default


    print(LeftRightImagery().datasets)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [<moabb.datasets.bnci.BNCI2014001 object at 0x7f7f5f3d6978>, <moabb.datasets.bnci.BNCI2014004 object at 0x7f7f5f3d6f98>, <moabb.datasets.gigadb.Cho2017 object at 0x7f7f5f3d64e0>, <moabb.datasets.mpi_mi.MunichMI object at 0x7f7f5f3d60f0>, <moabb.datasets.physionet_mi.PhysionetMI object at 0x7f7f5f3d6080>, <moabb.datasets.schirrmeister2017.Schirrmeister2017 object at 0x7f7f5f3d62b0>, <moabb.datasets.bbci_eeg_fnirs.Shin2017A object at 0x7f7f5f3d6898>, <moabb.datasets.Weibo2014.Weibo2014 object at 0x7f7f5f3d6d68>, <moabb.datasets.Zhou2016.Zhou2016 object at 0x7f7f5f3d6518>]




Or you can run a search through the available datasets:


.. code-block:: default

    print(utils.dataset_search(paradigm='imagery', min_subjects=6))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [<moabb.datasets.alex_mi.AlexMI object at 0x7f7f5f3d6898>, <moabb.datasets.bnci.BNCI2014001 object at 0x7f7f5f3d6d68>, <moabb.datasets.bnci.BNCI2014002 object at 0x7f7f5f3d6518>, <moabb.datasets.bnci.BNCI2014004 object at 0x7f7f5f3d6320>, <moabb.datasets.bnci.BNCI2015001 object at 0x7f7f5f3d66a0>, <moabb.datasets.bnci.BNCI2015004 object at 0x7f7f5f3d6438>, <moabb.datasets.gigadb.Cho2017 object at 0x7f7f5f3d6e10>, <moabb.datasets.mpi_mi.MunichMI object at 0x7f7f5f3d6c50>, <moabb.datasets.upper_limb.Ofner2017 object at 0x7f7f5f3d6c18>, <moabb.datasets.physionet_mi.PhysionetMI object at 0x7f7f5f3d60b8>, <moabb.datasets.schirrmeister2017.Schirrmeister2017 object at 0x7f7f5f3d6fd0>, <moabb.datasets.bbci_eeg_fnirs.Shin2017A object at 0x7f7f5f3d6be0>, <moabb.datasets.Weibo2014.Weibo2014 object at 0x7f7f5f3d6940>]




Or you can simply make your own list (which we do here due to computational
constraints)


.. code-block:: default


    datasets = [BNCI2014001()]








Paradigm
--------------------

Paradigms define the events, epoch time, bandpass, and other preprocessing
parameters. They have defaults that you can read in the documentation, or you
can simply set them as we do here. A single paradigm defines a method for
going from continuous data to trial data of a fixed size. To learn more look
at the tutorial Exploring Paradigms


.. code-block:: default


    fmin = 8
    fmax = 35
    paradigm = LeftRightImagery(fmin=fmin, fmax=fmax)








Evaluation
--------------------

An evaluation defines how the training and test sets are chosen. This could
be cross-validated within a single recording, or across days, or sessions, or
subjects. This also is the correct place to specify multiple threads.


.. code-block:: default


    evaluation = CrossSessionEvaluation(paradigm=paradigm, datasets=datasets,
                                        suffix='examples', overwrite=False)
    results = evaluation.process(pipelines)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    2020-01-15 14:36:02 a97ed8b73994 root[136] INFO Processing dataset: 001-2014
    2020-01-15 14:36:05 a97ed8b73994 root[136] INFO AM + LDA | 001-2014 | 1 | session_E: Score 0.802
    2020-01-15 14:36:05 a97ed8b73994 root[136] INFO AM + LDA | 001-2014 | 1 | session_T: Score 0.786
    2020-01-15 14:36:06 a97ed8b73994 root[136] INFO AM + SVM | 001-2014 | 1 | session_E: Score 0.774
    2020-01-15 14:36:06 a97ed8b73994 root[136] INFO AM + SVM | 001-2014 | 1 | session_T: Score 0.797
    2020-01-15 14:36:09 a97ed8b73994 root[136] INFO AM + LDA | 001-2014 | 2 | session_E: Score 0.499
    2020-01-15 14:36:09 a97ed8b73994 root[136] INFO AM + LDA | 001-2014 | 2 | session_T: Score 0.577
    2020-01-15 14:36:09 a97ed8b73994 root[136] INFO AM + SVM | 001-2014 | 2 | session_E: Score 0.471
    2020-01-15 14:36:09 a97ed8b73994 root[136] INFO AM + SVM | 001-2014 | 2 | session_T: Score 0.551
    2020-01-15 14:36:13 a97ed8b73994 root[136] INFO AM + LDA | 001-2014 | 3 | session_E: Score 0.946
    2020-01-15 14:36:13 a97ed8b73994 root[136] INFO AM + LDA | 001-2014 | 3 | session_T: Score 0.981
    2020-01-15 14:36:13 a97ed8b73994 root[136] INFO AM + SVM | 001-2014 | 3 | session_E: Score 0.958
    2020-01-15 14:36:13 a97ed8b73994 root[136] INFO AM + SVM | 001-2014 | 3 | session_T: Score 0.961
    2020-01-15 14:36:16 a97ed8b73994 root[136] INFO AM + LDA | 001-2014 | 4 | session_E: Score 0.696
    2020-01-15 14:36:16 a97ed8b73994 root[136] INFO AM + LDA | 001-2014 | 4 | session_T: Score 0.757
    2020-01-15 14:36:16 a97ed8b73994 root[136] INFO AM + SVM | 001-2014 | 4 | session_E: Score 0.692
    2020-01-15 14:36:16 a97ed8b73994 root[136] INFO AM + SVM | 001-2014 | 4 | session_T: Score 0.716
    2020-01-15 14:36:19 a97ed8b73994 root[136] INFO AM + LDA | 001-2014 | 5 | session_E: Score 0.487
    2020-01-15 14:36:19 a97ed8b73994 root[136] INFO AM + LDA | 001-2014 | 5 | session_T: Score 0.480
    2020-01-15 14:36:19 a97ed8b73994 root[136] INFO AM + SVM | 001-2014 | 5 | session_E: Score 0.505
    2020-01-15 14:36:20 a97ed8b73994 root[136] INFO AM + SVM | 001-2014 | 5 | session_T: Score 0.532
    2020-01-15 14:36:23 a97ed8b73994 root[136] INFO AM + LDA | 001-2014 | 6 | session_E: Score 0.664
    2020-01-15 14:36:23 a97ed8b73994 root[136] INFO AM + LDA | 001-2014 | 6 | session_T: Score 0.700
    2020-01-15 14:36:23 a97ed8b73994 root[136] INFO AM + SVM | 001-2014 | 6 | session_E: Score 0.676
    2020-01-15 14:36:23 a97ed8b73994 root[136] INFO AM + SVM | 001-2014 | 6 | session_T: Score 0.729
    2020-01-15 14:36:26 a97ed8b73994 root[136] INFO AM + LDA | 001-2014 | 7 | session_E: Score 0.805
    2020-01-15 14:36:26 a97ed8b73994 root[136] INFO AM + LDA | 001-2014 | 7 | session_T: Score 0.675
    2020-01-15 14:36:26 a97ed8b73994 root[136] INFO AM + SVM | 001-2014 | 7 | session_E: Score 0.773
    2020-01-15 14:36:27 a97ed8b73994 root[136] INFO AM + SVM | 001-2014 | 7 | session_T: Score 0.686
    2020-01-15 14:36:30 a97ed8b73994 root[136] INFO AM + LDA | 001-2014 | 8 | session_E: Score 0.954
    2020-01-15 14:36:30 a97ed8b73994 root[136] INFO AM + LDA | 001-2014 | 8 | session_T: Score 0.976
    2020-01-15 14:36:30 a97ed8b73994 root[136] INFO AM + SVM | 001-2014 | 8 | session_E: Score 0.972
    2020-01-15 14:36:30 a97ed8b73994 root[136] INFO AM + SVM | 001-2014 | 8 | session_T: Score 0.956
    2020-01-15 14:36:33 a97ed8b73994 root[136] INFO AM + LDA | 001-2014 | 9 | session_E: Score 0.923
    2020-01-15 14:36:33 a97ed8b73994 root[136] INFO AM + LDA | 001-2014 | 9 | session_T: Score 0.819
    2020-01-15 14:36:34 a97ed8b73994 root[136] INFO AM + SVM | 001-2014 | 9 | session_E: Score 0.926
    2020-01-15 14:36:34 a97ed8b73994 root[136] INFO AM + SVM | 001-2014 | 9 | session_T: Score 0.773




Results are returned as a pandas DataFrame, and from here you can do as you
want with them


.. code-block:: default


    print(results.head())




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

          score  ...  pipeline
    0  0.801698  ...  AM + LDA
    1  0.786458  ...  AM + LDA
    2  0.498650  ...  AM + LDA
    3  0.576582  ...  AM + LDA
    4  0.945988  ...  AM + LDA

    [5 rows x 9 columns]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  31.630 seconds)


.. _sphx_glr_download_auto_tutorials_plot_Getting_Started.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_Getting_Started.py <plot_Getting_Started.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_Getting_Started.ipynb <plot_Getting_Started.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
